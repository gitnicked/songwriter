<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Songwriting App</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;700&display=swap" rel="stylesheet">
    <style>
        /* --- Theme Variables --- */
        :root {
            --bg-color: #0a0a0a;
            --text-color: #cccccc;
            --text-color-dim: #666666;
            --primary-glow: #00ffff; /* Cyan accent */
            --secondary-glow: #444444;
            --textarea-bg: #121212;
            --border-color: #333333;
            --button-bg: #1f1f1f;
            --button-hover-bg: #2a2a2a;
            --button-glow-focus: 0 0 8px var(--primary-glow);
            --text-glow-subtle: none;
            /* Rhyme Section */
            --rhyme-bg: #1a1a1a;
            --rhyme-border: var(--border-color);
            --rhyme-hover-bg: var(--button-hover-bg);
            --perfect-rhyme-color: var(--primary-glow);
            /* Structure Analysis Section */
            --structure-bg: var(--rhyme-bg); /* Use similar bg */
            --structure-border: var(--rhyme-border);
        }

        /* --- Base Styles --- */
        body { font-family: 'Inter', sans-serif; background-color: var(--bg-color); color: var(--text-color); transition: background-color 0.3s ease, color 0.3s ease; min-height: 100vh; display: flex; flex-direction: column; overflow: hidden; }

        /* --- Spacelike Background --- */
        #space-background { position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: -2; background-color: var(--bg-color); }
        .stars { position: absolute; top: 0; left: 0; right: 0; bottom: 0; width: 100%; height: 100%; display: block; background: transparent; }
        .stars:after { content: " "; position: absolute; top: 0; width: 1px; height: 1px; background: transparent; box-shadow: var(--stars-small); animation: animStar 150s linear infinite; }
        .stars:before { content: " "; position: absolute; top: 0; width: 2px; height: 2px; background: transparent; box-shadow: var(--stars-medium); animation: animStar 100s linear infinite; }
        @keyframes animStar { from { transform: translateY(0px); } to { transform: translateY(-1000px); } }

        /* --- Minimalist Styling --- */
        input, textarea, button, label[for="importFile"] { border-radius: 2px; border: 1px solid var(--border-color); }
        textarea:focus, input:focus { outline: none; border-color: var(--primary-glow); box-shadow: none; }
        button, label[for="importFile"] { background-color: var(--button-bg); transition: background-color 0.2s ease, border-color 0.2s ease; color: var(--text-color); }
        button:hover, label[for="importFile"]:hover { background-color: var(--button-hover-bg); border-color: var(--secondary-glow); }
        button:focus, label[for="importFile"]:focus-within { outline: none; border-color: var(--primary-glow); box-shadow: var(--button-glow-focus); }
        label { color: var(--text-color-dim); font-weight: 300; }

        /* --- Layout Specifics --- */
        .lyrics-editor-container { display: flex; flex-direction: row; flex-grow: 1; gap: 0; background-color: var(--textarea-bg); border: 1px solid var(--border-color); border-radius: 2px; }
        .lyrics-editor-container:focus-within { border-color: var(--primary-glow); }

        /* Line Counters Column */
        #lineCounterColumn { font-family: monospace; font-size: 0.8rem; line-height: 1.6; padding: 12px 8px 12px 12px; color: var(--text-color-dim); text-align: right; white-space: pre; overflow: hidden; user-select: none; background-color: var(--textarea-bg); border-right: 1px solid var(--border-color); flex-shrink: 0; }
        #lineCounterColumn > div { display: flex; justify-content: flex-end; gap: 6px; min-height: calc(0.9rem * 1.6); }
        #lineCounterColumn .line-number.dimmed { opacity: 0.4; }
        #lineCounterColumn .syllable-count { min-width: 1.5em; display: inline-block; text-align: right; color: var(--primary-glow); opacity: 0.7; }
        #lineCounterColumn .syllable-count.hidden { visibility: hidden; }

        /* Lyrics Textarea */
        #lyricsInput { flex-grow: 1; width: 100%; background-color: transparent; color: var(--text-color); border: none; border-radius: 0; resize: none; font-size: 0.9rem; line-height: 1.6; padding: 12px; font-family: 'Inter', sans-serif; }
        #lyricsInput:focus { outline: none; box-shadow: none; border: none; }

        /* --- Rhyme Section --- */
        #rhymeSection { background-color: var(--rhyme-bg); border: 1px solid var(--rhyme-border); border-radius: 2px; padding: 8px 12px; margin-top: 8px; max-height: 150px; /* Adjusted height */ overflow-y: auto; }
        #rhymeSection h4 { font-size: 0.8rem; font-weight: 500; color: var(--text-color-dim); margin-bottom: 6px; text-transform: uppercase; letter-spacing: 0.05em; }
        #rhymeSection h4 span { color: var(--primary-glow); font-weight: 700; }
        #rhymeList { font-size: 0.85rem; display: flex; flex-wrap: wrap; gap: 4px 8px; list-style: none; padding: 0; margin: 0; }
        #rhymeList li { cursor: pointer; padding: 2px 6px; border-radius: 2px; transition: background-color 0.2s ease, color 0.2s ease, border-color 0.2s ease; border: 1px solid transparent; color: var(--text-color); }
        #rhymeList li:hover { background-color: var(--rhyme-hover-bg); border-color: var(--secondary-glow); }
        #rhymeList li.perfect-rhyme { color: var(--perfect-rhyme-color); font-weight: 500; }
        #rhymeList li.perfect-rhyme:hover { background-color: var(--rhyme-hover-bg); border-color: var(--perfect-rhyme-color); }
        #rhymeShowMore { font-size: 0.75rem; color: var(--text-color-dim); background: none; border: none; padding: 4px 0; margin-top: 4px; cursor: pointer; text-decoration: underline; display: block; width: 100%; text-align: center; }
        #rhymeShowMore:hover { color: var(--primary-glow); }
        #rhymeShowMore.hidden { display: none; }

        /* --- Structure Analysis Section --- */
        #structureAnalysisSection {
            background-color: var(--structure-bg);
            border: 1px solid var(--structure-border);
            border-radius: 2px;
            padding: 8px 12px;
            margin-top: 8px;
            max-height: 150px; /* Limit height */
            overflow-y: auto;
        }
        #structureList { list-style: none; padding: 0; margin: 0; font-size: 0.8rem; }
        #structureList li {
            display: flex;
            justify-content: space-between;
            padding: 4px 0;
            border-bottom: 1px solid var(--border-color);
            color: var(--text-color-dim);
        }
        #structureList li:last-child { border-bottom: none; }
        #structureList .section-name { font-weight: 500; color: var(--text-color); flex-basis: 50%; /* Give name more space */ text-align: left; }
        #structureList .section-bars { flex-basis: 25%; text-align: right; }
        #structureList .section-words { flex-basis: 25%; text-align: right; }
        #structurePlaceholder { /* Placeholder for when no structure tags are found */
             font-size: 0.8rem; color: var(--text-color-dim); font-style: italic; text-align: center; padding: 10px;
        }


        /* Custom Scrollbar */
        ::-webkit-scrollbar { width: 6px; height: 6px; }
        ::-webkit-scrollbar-track { background: var(--textarea-bg); }
        ::-webkit-scrollbar-thumb { background-color: var(--border-color); border-radius: 0; }
        ::-webkit-scrollbar-thumb:hover { background-color: var(--secondary-glow); }

        /* Settings Panel */
        #settingsPanel { transition: transform 0.3s ease-in-out; background-color: #0f0f0f; border-left: 1px solid var(--border-color); border-radius: 0; }
        #settingsPanel.hidden { transform: translateX(100%); }
        #settingsPanel h2, #settingsPanel h3 { color: var(--text-color); font-weight: 400; border-color: var(--border-color); }
        #settingsPanel input[type="color"] { border-radius: 2px; border: 1px solid var(--border-color); height: 2rem; padding: 2px; background-color: var(--button-bg); }
        #settingsPanel input[type="color"]::-webkit-color-swatch-wrapper { padding: 0; border: none; }
        #settingsPanel input[type="color"]::-webkit-color-swatch { border: 1px solid var(--border-color); border-radius: 1px; }

        /* Utility classes */
        .theme-bg { background-color: var(--bg-color); }
        .theme-text { color: var(--text-color); }
        .theme-textarea-bg { background-color: var(--textarea-bg); }
        .theme-border { border-color: var(--border-color); }
        .theme-button-bg { background-color: var(--button-bg); }
        .theme-button-hover-bg:hover { background-color: var(--button-hover-bg); }
        .theme-primary-glow-focus:focus { box-shadow: var(--button-glow-focus); border-color: var(--primary-glow); }

    </style>
</head>
<body class="theme-bg theme-text p-4 md:p-6 lg:p-8 flex flex-col">

    <div id="space-background">
        <div id="stars-small" class="stars"></div>
        <div id="stars-medium" class="stars"></div>
    </div>

    <header class="mb-4 flex justify-between items-center">
         <div class="flex-grow mr-4">
            <label for="trackTitle" class="sr-only">Track Title</label>
            <input type="text" id="trackTitle" placeholder="Untitled Track..." class="w-full p-2 text-lg theme-textarea-bg theme-text theme-border focus:theme-primary-glow-focus">
        </div>
        <button id="settingsToggle" title="Open Settings" class="p-2 theme-button-bg theme-border theme-button-hover-bg theme-primary-glow-focus flex-shrink-0">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 theme-text">
                <path stroke-linecap="round" stroke-linejoin="round" d="M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527c.43-.306.98-.172 1.214.247l.547.947c.233.405.12.94-.247 1.214l-.527.737c-.25.35-.272.806-.108 1.204.165.397.505.71.93.78l.893.15c.542.09.94.56.94 1.11v1.093c0 .55-.398 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.142.854.108 1.204l.527.738c.306.43.172.98-.247 1.213l-.947.547c-.405.233-.94.12-1.214-.247l-.737-.527c-.35-.25-.806-.272-1.204-.108-.397.165-.71.505-.78.93l-.15.894c-.09.542-.56.94-1.11.94h-1.093c-.55 0-1.02-.398-1.11-.94l-.149-.894c-.07-.424-.384-.764-.78-.93-.398-.164-.855-.142-1.205.108l-.737.527c-.43.306-.98-.172-1.214-.247l-.547-.947c-.233-.405-.12-.94.247-1.214l.527-.737c.25-.35.272.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.11v-1.093c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.142-.854-.108-1.204l-.527-.738c-.306-.43-.172-.98.247-1.213l.947-.547c.405-.233.94-.12 1.214.247l.737.527c.35.25.806.272 1.204.108.397.165.71.505.78-.93l.15-.894Z" />
                <path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
            </svg>
        </button>
    </header>

    <main class="flex-grow flex flex-col md:flex-row gap-4 md:gap-6">
        <div class="flex-grow flex flex-col gap-2 md:w-2/3">
             <label for="lyricsInput" class="block text-xs font-medium uppercase tracking-wider">Lyrics</label>
             <div class="flex gap-1 mb-1 flex-wrap">
                <button class="px-2 py-0.5 text-xs rounded-sm theme-button-bg theme-border theme-button-hover-bg theme-primary-glow-focus" onclick="insertTag('[Intro]')">Intro</button>
                <button class="px-2 py-0.5 text-xs rounded-sm theme-button-bg theme-border theme-button-hover-bg theme-primary-glow-focus" onclick="insertTag('[Verse]')">Verse</button>
                <button class="px-2 py-0.5 text-xs rounded-sm theme-button-bg theme-border theme-button-hover-bg theme-primary-glow-focus" onclick="insertTag('[Chorus]')">Chorus</button>
                <button class="px-2 py-0.5 text-xs rounded-sm theme-button-bg theme-border theme-button-hover-bg theme-primary-glow-focus" onclick="insertTag('[Bridge]')">Bridge</button>
                <button class="px-2 py-0.5 text-xs rounded-sm theme-button-bg theme-border theme-button-hover-bg theme-primary-glow-focus" onclick="insertTag('[Outro]')">Outro</button>
                <button class="px-2 py-0.5 text-xs rounded-sm theme-button-bg theme-border theme-button-hover-bg theme-primary-glow-focus" onclick="insertTag('[]')">Custom</button>
            </div>
            <div class="lyrics-editor-container flex-grow">
                <div id="lineCounterColumn"></div>
                <textarea id="lyricsInput" placeholder="Begin..." class="theme-text"></textarea>
            </div>
        </div>

        <aside class="flex flex-col gap-4 md:w-1/3">
            <div class="flex-grow flex flex-col gap-2">
                <label for="ideasInput" class="block text-xs font-medium uppercase tracking-wider">Ideas / Notes</label>
                <textarea id="ideasInput" placeholder="Themes, structure, chords..." class="flex-grow w-full p-3 theme-textarea-bg theme-text theme-border focus:theme-primary-glow-focus resize-none" style="min-height: 80px;"></textarea> </div>

            <div id="rhymeSectionContainer" class="flex flex-col gap-2">
                 <label class="block text-xs font-medium uppercase tracking-wider">Rhymes</label>
                 <div id="rhymeSection" class="hidden"> <h4 id="rhymeHeader">Rhymes for <span>...</span></h4>
                     <ul id="rhymeList"></ul>
                     <button id="rhymeShowMore" class="hidden">Show More</button>
                 </div>
                 <div id="rhymePlaceholder" class="text-xs text-center theme-text-dim italic p-4 theme-textarea-bg theme-border rounded-sm">Type a word to find rhymes...</div> </div>

            <div class="flex flex-col gap-2">
                 <label class="block text-xs font-medium uppercase tracking-wider">Structure</label>
                 <div id="structureAnalysisSection">
                     <ul id="structureList">
                         </ul>
                     <div id="structurePlaceholder" class="hidden">Add section tags like [Verse] or [Chorus] to analyze structure.</div>
                 </div>
             </div>


            <div class="flex flex-col gap-2">
                 <label class="block text-xs font-medium uppercase tracking-wider">File</label>
                <div class="flex gap-2">
                    <button id="exportBtn" class="flex-1 py-2 px-3 text-sm theme-button-bg theme-border theme-button-hover-bg theme-primary-glow-focus">Export JSON</button>
                    <label for="importFile" class="flex-1 py-2 px-3 text-sm theme-button-bg theme-border theme-button-hover-bg theme-primary-glow-focus text-center cursor-pointer">
                        Import JSON
                        <input type="file" id="importFile" accept=".json" class="hidden">
                    </label>
                </div>
            </div>
        </aside>
    </main>

    <div id="settingsPanel" class="fixed top-0 right-0 h-full w-64 md:w-72 theme-bg p-5 shadow-lg transform translate-x-full z-50 overflow-y-auto">
        <div class="flex justify-between items-center mb-5">
            <h2 class="text-lg font-medium">Settings</h2>
            <button id="closeSettings" title="Close Settings" class="p-1 theme-button-bg theme-border theme-button-hover-bg theme-primary-glow-focus">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 theme-text">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                </svg>
            </button>
        </div>
        <div class="space-y-3">
            <h3 class="text-sm font-medium uppercase tracking-wider border-b theme-border pb-1">Theme Colors</h3>
            <div><label for="bgColor" class="block text-xs mb-1">Background</label><input type="color" id="bgColor" class="w-full h-8 p-0 border-none rounded-sm cursor-pointer theme-border"></div>
            <div><label for="textColor" class="block text-xs mb-1">Text</label><input type="color" id="textColor" class="w-full h-8 p-0 border-none rounded-sm cursor-pointer theme-border"></div>
            <div><label for="textareaBgColor" class="block text-xs mb-1">Input Area BG</label><input type="color" id="textareaBgColor" class="w-full h-8 p-0 border-none rounded-sm cursor-pointer theme-border"></div>
            <div><label for="primaryGlowColor" class="block text-xs mb-1">Accent / Glow</label><input type="color" id="primaryGlowColor" class="w-full h-8 p-0 border-none rounded-sm cursor-pointer theme-border"></div>
            <div><label for="borderColor" class="block text-xs mb-1">Borders</label><input type="color" id="borderColor" class="w-full h-8 p-0 border-none rounded-sm cursor-pointer theme-border"></div>
            <h3 class="text-sm font-medium uppercase tracking-wider border-b theme-border pb-1 pt-3">Presets</h3>
            <div class="grid grid-cols-2 gap-1">
                <button class="preset-btn p-1.5 rounded-sm theme-border text-xs" data-preset='{"--bg-color": "#0a0a0a", "--text-color": "#cccccc", "--primary-glow": "#00ffff", "--secondary-glow": "#444444", "--textarea-bg": "#121212", "--border-color": "#333333", "--button-bg": "#1f1f1f", "--button-hover-bg": "#2a2a2a"}'>Default Dark</button>
                <button class="preset-btn p-1.5 rounded-sm theme-border text-xs" data-preset='{"--bg-color": "#0d1b2a", "--text-color": "#e0e1dd", "--primary-glow": "#ff6b6b", "--secondary-glow": "#555555", "--textarea-bg": "#1b263b", "--border-color": "#415a77", "--button-bg": "#415a77", "--button-hover-bg": "#5b7a9a"}'>Midnight Blaze</button>
                <button class="preset-btn p-1.5 rounded-sm theme-border text-xs" data-preset='{"--bg-color": "#2d003d", "--text-color": "#f0e6ff", "--primary-glow": "#ff00ff", "--secondary-glow": "#666666", "--textarea-bg": "#4a006a", "--border-color": "#6a009a", "--button-bg": "#6a009a", "--button-hover-bg": "#8000b0"}'>Neon Nebula</button>
                <button class="preset-btn p-1.5 rounded-sm theme-border text-xs" data-preset='{"--bg-color": "#f0f0f0", "--text-color": "#222222", "--primary-glow": "#005eff", "--secondary-glow": "#bbbbbb", "--textarea-bg": "#ffffff", "--border-color": "#cccccc", "--button-bg": "#e0e0e0", "--button-hover-bg": "#d0d0d0"}'>Minimal Light</button>
            </div>
            <button id="resetColors" class="w-full mt-3 py-1.5 px-3 text-sm rounded-sm theme-button-bg theme-border theme-button-hover-bg theme-primary-glow-focus">Reset Colors</button>
        </div>
    </div>

    <script>
        // --- DOM Elements ---
        const trackTitleInput = document.getElementById('trackTitle');
        const lyricsInput = document.getElementById('lyricsInput');
        const ideasInput = document.getElementById('ideasInput');
        const lineCounterColumn = document.getElementById('lineCounterColumn');
        const exportBtn = document.getElementById('exportBtn');
        const importFile = document.getElementById('importFile');
        const settingsToggle = document.getElementById('settingsToggle');
        const closeSettings = document.getElementById('closeSettings');
        const settingsPanel = document.getElementById('settingsPanel');
        const bgColorInput = document.getElementById('bgColor');
        const textColorInput = document.getElementById('textColor');
        const textareaBgColorInput = document.getElementById('textareaBgColor');
        const primaryGlowColorInput = document.getElementById('primaryGlowColor');
        const borderColorInput = document.getElementById('borderColor');
        const presetButtons = document.querySelectorAll('.preset-btn');
        const resetColorsBtn = document.getElementById('resetColors');
        const root = document.documentElement;
        const starsSmall = document.getElementById('stars-small');
        const starsMedium = document.getElementById('stars-medium');
        // Rhyme Elements
        const rhymeSection = document.getElementById('rhymeSection');
        const rhymePlaceholder = document.getElementById('rhymePlaceholder');
        const rhymeHeader = document.getElementById('rhymeHeader');
        const rhymeHeaderWord = rhymeHeader.querySelector('span');
        const rhymeList = document.getElementById('rhymeList');
        const rhymeShowMore = document.getElementById('rhymeShowMore');
        // Structure Analysis Elements
        const structureList = document.getElementById('structureList');
        const structurePlaceholder = document.getElementById('structurePlaceholder');


        // --- Initial State ---
        const defaultTheme = {
            '--bg-color': '#0a0a0a', '--text-color': '#cccccc', '--text-color-dim': '#666666',
            '--primary-glow': '#00ffff', '--secondary-glow': '#444444', '--textarea-bg': '#121212',
            '--border-color': '#333333', '--button-bg': '#1f1f1f', '--button-hover-bg': '#2a2a2a',
             '--rhyme-bg': '#1a1a1a', '--perfect-rhyme-color': '#00ffff',
             '--structure-bg': '#1a1a1a', '--structure-border': '#333333' // Add structure theme vars
        };
        let currentTheme = { ...defaultTheme };
        let currentRhymeResults = { perfect: [], other: [] };
        const RHYMES_INITIAL_DISPLAY = 12;
        const PERFECT_RHYME_SCORE_THRESHOLD = 250;

        // --- Utility: Debounce ---
        function debounce(func, wait) { let timeout; return function executedFunction(...args) { const later = () => { clearTimeout(timeout); func(...args); }; clearTimeout(timeout); timeout = setTimeout(later, wait); }; }

        // --- Starfield Generation ---
        function generateStars(n, sizeClass) { let boxShadow = ''; const vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0); const vh = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0); for (let i = 0; i < n; i++) { boxShadow += `${Math.random() * vw}px ${Math.random() * vh}px #FFF${i > 0 ? ',' : ''}`; } root.style.setProperty(sizeClass, boxShadow); }

        // --- Syllable Counting ---
        function countSyllables(text) { const cleanText = text.replace(/\[.*?\]/g, '').trim(); if (cleanText === "") return 0; const lowerText = cleanText.toLowerCase(); const processedText = lowerText.replace(/[^a-z\s-]/g, ''); const words = processedText.split(/[\s-]+/); let totalSyllables = 0; words.forEach(word => { if (!word) return; if (word.length <= 3) { if (word.match(/[aeiouy]/)) totalSyllables += 1; return; } let tempWord = word.replace(/(?:[^laeiouy]es|ed|[^laeiouy]e)$/, ''); tempWord = tempWord.replace(/^y/, ''); const vowelGroups = tempWord.match(/[aeiouy]+/g); let syllables = vowelGroups ? vowelGroups.length : 0; if (tempWord.endsWith('e') && !tempWord.endsWith('le') && syllables > 1 && tempWord.length > 3) { const charBeforeE = tempWord.charAt(tempWord.length - 2); if (!/[aeiouy]/.test(charBeforeE)) { /* syllables--; */ } } totalSyllables += Math.max(1, syllables); }); return Math.max(0, totalSyllables); }

        // --- Word Counting ---
        function countWords(text) {
            // Remove bracketed content before counting
            const cleanText = text.replace(/\[.*?\]/g, '').trim();
            if (cleanText === "") return 0;
            // Split by whitespace or hyphens and filter out empty strings
            const words = cleanText.split(/[\s-]+/).filter(word => word.length > 0);
            return words.length;
        }


        // --- Update Line Counters & Structure Analysis ---
        function updateCountersAndStructure() {
            const lyrics = lyricsInput.value;
            const lines = lyrics.split('\n');
            let counterHTML = '';
            const analysisData = analyzeStructure(lines); // Analyze structure first

            // Update Line Counters (using the same logic as before)
            lines.forEach((line, index) => {
                const lineNumber = index + 1;
                const trimmedLine = line.trim();
                const isBracketOnly = trimmedLine === '' || (trimmedLine.startsWith('[') && trimmedLine.endsWith(']') && trimmedLine.indexOf(']', 1) === trimmedLine.length - 1);
                if (isBracketOnly) {
                    counterHTML += `<div><span class="line-number dimmed">${lineNumber}</span><span class="syllable-count hidden">0</span></div>`;
                } else {
                    const syllables = countSyllables(line);
                    counterHTML += `<div><span class="line-number">${lineNumber}</span><span class="syllable-count">${syllables}</span></div>`;
                }
            });
            lineCounterColumn.innerHTML = counterHTML;
            syncScroll();

            // Display Structure Analysis
            displayStructureAnalysis(analysisData);
        }


        // --- Structure Analysis Logic ---
        function analyzeStructure(lines) {
            const sections = [];
            let currentSection = null;
            const tagCounts = {}; // To handle numbering like Verse 1, Verse 2

            lines.forEach(line => {
                const trimmedLine = line.trim();
                const tagMatch = trimmedLine.match(/^\[(.*?)\]$/); // Check if line IS a tag

                if (tagMatch) {
                    // Finalize the previous section if there was one
                    if (currentSection) {
                        sections.push(currentSection);
                    }

                    // Start a new section
                    const tagContent = tagMatch[1].trim();
                    const baseTagName = tagContent.replace(/\s*\d+$/, ''); // Remove trailing numbers for base count

                    // Increment count for this base tag name
                    tagCounts[baseTagName] = (tagCounts[baseTagName] || 0) + 1;

                    // Determine the display name (e.g., "Verse 1", "Chorus", "Custom Tag 2")
                    let sectionName = baseTagName;
                    if (tagCounts[baseTagName] > 1) {
                        sectionName += ` ${tagCounts[baseTagName]}`;
                    } else if (tagContent !== baseTagName) {
                        // If the original tag had a number (e.g., [Verse 1]), use that specific name
                        // but still track the base count correctly.
                        sectionName = tagContent;
                    }


                    currentSection = {
                        name: sectionName,
                        bars: 0,
                        words: 0,
                        lines: [] // Store lines temporarily if needed, or just count directly
                    };
                } else if (currentSection && trimmedLine !== '') {
                    // If it's a non-empty line within a section (and not a tag line)
                    currentSection.bars += 1; // Count this line as a bar
                    currentSection.words += countWords(line); // Add words from this line
                    // currentSection.lines.push(line); // Optional: store lines
                }
            });

            // Add the last section if it exists
            if (currentSection) {
                sections.push(currentSection);
            }

            return sections;
        }

        // --- Display Structure Analysis ---
        function displayStructureAnalysis(analysisData) {
            structureList.innerHTML = ''; // Clear previous analysis

            if (analysisData.length === 0) {
                structurePlaceholder.classList.remove('hidden'); // Show placeholder
                return;
            }

            structurePlaceholder.classList.add('hidden'); // Hide placeholder

            analysisData.forEach(section => {
                const li = document.createElement('li');
                li.innerHTML = `
                    <span class="section-name">${section.name}</span>
                    <span class="section-bars">Bars: ${section.bars}</span>
                    <span class="section-words">Words: ${section.words}</span>
                `;
                structureList.appendChild(li);
            });
        }


        // --- Synchronize Scrolling ---
        function syncScroll() { lineCounterColumn.scrollTop = lyricsInput.scrollTop; }

        // --- Insert Tags ---
        function insertTag(tag) {
            // ... (insertTag logic remains the same, but now triggers combined update)
            const start = lyricsInput.selectionStart; const end = lyricsInput.selectionEnd; const text = lyricsInput.value;
            const before = text.substring(0, start); const after = text.substring(end, text.length);
            const prefix = (start === 0 || text[start - 1] === '\n') ? '' : '\n';
            const suffix = (end === text.length || text[end] === '\n') ? '' : '\n';
            if (tag === '[]') {
                 lyricsInput.value = before + prefix + '[]' + suffix + after; lyricsInput.focus();
                 lyricsInput.setSelectionRange(start + prefix.length + 1, start + prefix.length + 1);
            } else {
                lyricsInput.value = before + prefix + tag + suffix + after; lyricsInput.focus();
                lyricsInput.setSelectionRange(start + prefix.length + tag.length + suffix.length, start + prefix.length + tag.length + suffix.length);
            }
            updateCountersAndStructure(); // Use combined update function
        }

        // --- Rhyme Finder Logic ---
        async function fetchRhymes(word) {
            // ... (fetchRhymes logic unchanged)
             if (!word || word.length < 2) { clearRhymes(); return; }
             console.log("Fetching rhymes for:", word); rhymeHeaderWord.textContent = word; rhymeSection.classList.remove('hidden'); rhymePlaceholder.classList.add('hidden'); rhymeList.innerHTML = '<li><i>Loading...</i></li>'; rhymeShowMore.classList.add('hidden'); currentRhymeResults = { perfect: [], other: [] };
             const originalSyllableCount = countSyllables(word);
             try {
                 const response = await fetch(`https://rhymebrain.com/talk?function=getRhymes&word=${encodeURIComponent(word)}`); if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`); const rhymes = await response.json();
                 rhymes.forEach(rhyme => { if (rhyme.word.toLowerCase() === word.toLowerCase()) return; const rhymeSyllableCount = countSyllables(rhyme.word); if (rhyme.score >= PERFECT_RHYME_SCORE_THRESHOLD && rhymeSyllableCount === originalSyllableCount) { currentRhymeResults.perfect.push(rhyme); } else { currentRhymeResults.other.push(rhyme); } });
                 currentRhymeResults.perfect.sort((a, b) => b.score - a.score); currentRhymeResults.other.sort((a, b) => b.score - a.score);
                 displayRhymes(currentRhymeResults, true);
             } catch (error) { console.error("Error fetching rhymes:", error); rhymeList.innerHTML = '<li><i>Error fetching rhymes.</i></li>'; currentRhymeResults = { perfect: [], other: [] }; rhymeShowMore.classList.add('hidden'); }
        }

        function displayRhymes(results, initial = false) {
            // ... (displayRhymes logic unchanged)
             rhymeList.innerHTML = ''; const allRhymes = [...results.perfect, ...results.other]; const totalToShow = initial ? RHYMES_INITIAL_DISPLAY : allRhymes.length; let displayedCount = 0;
             if (allRhymes.length === 0) { rhymeList.innerHTML = '<li><i>No rhymes found.</i></li>'; rhymeShowMore.classList.add('hidden'); return; }
             const createRhymeLi = (rhyme, isPerfect) => { if (displayedCount >= totalToShow) return; const li = document.createElement('li'); li.textContent = rhyme.word; li.title = `Score: ${rhyme.score}, Syllables: ${countSyllables(rhyme.word)}`; if (isPerfect) { li.classList.add('perfect-rhyme'); li.title += " (Perfect Match)"; } li.addEventListener('click', () => insertRhyme(rhyme.word)); rhymeList.appendChild(li); displayedCount++; };
             results.perfect.forEach(rhyme => createRhymeLi(rhyme, true)); results.other.forEach(rhyme => createRhymeLi(rhyme, false));
             if (allRhymes.length > RHYMES_INITIAL_DISPLAY && initial && displayedCount >= RHYMES_INITIAL_DISPLAY) { rhymeShowMore.classList.remove('hidden'); } else { rhymeShowMore.classList.add('hidden'); }
        }

         function clearRhymes() { /* ... (unchanged) */ rhymeSection.classList.add('hidden'); rhymePlaceholder.classList.remove('hidden'); rhymeList.innerHTML = ''; rhymeShowMore.classList.add('hidden'); currentRhymeResults = { perfect: [], other: [] }; }
         function insertRhyme(rhymeWord) { /* ... (unchanged) */ const start = lyricsInput.selectionStart; const end = lyricsInput.selectionEnd; const text = lyricsInput.value; const before = text.substring(0, start); const after = text.substring(end, text.length); const prefix = (start > 0 && text[start-1] !== ' ' && text[start-1] !== '\n') ? ' ' : ''; lyricsInput.value = before + prefix + rhymeWord + after; lyricsInput.focus(); lyricsInput.setSelectionRange(start + prefix.length + rhymeWord.length, start + prefix.length + rhymeWord.length); updateCountersAndStructure(); }
         function getLastWordOfCurrentLine() { /* ... (unchanged) */ const text = lyricsInput.value; const cursorPosition = lyricsInput.selectionStart; const lineStart = text.lastIndexOf('\n', cursorPosition - 1) + 1; let lineEnd = text.indexOf('\n', cursorPosition); if (lineEnd === -1) lineEnd = text.length; const currentLineText = text.substring(lineStart, cursorPosition); const cleanedLine = currentLineText.replace(/\[.*?\]/g, ''); const words = cleanedLine.trim().split(/[\s-]+/); let lastWord = words.pop() || ''; lastWord = lastWord.replace(/[.,!?;:"]+$/, ''); return lastWord; }
         const debouncedCheckRhymes = debounce(() => { const lastWord = getLastWordOfCurrentLine(); if (lastWord && lastWord.length >= 2) { fetchRhymes(lastWord); } else { clearRhymes(); } }, 750);

        // --- Theme Management ---
        function applyTheme(theme) { /* ... (unchanged, handles new theme vars via merge) */ currentTheme = { ...defaultTheme, ...theme }; for (const [variable, value] of Object.entries(currentTheme)) { if (variable.startsWith('--')) { root.style.setProperty(variable, value); } } bgColorInput.value = currentTheme['--bg-color']; textColorInput.value = currentTheme['--text-color']; textareaBgColorInput.value = currentTheme['--textarea-bg']; primaryGlowColorInput.value = currentTheme['--primary-glow']; borderColorInput.value = currentTheme['--border-color']; root.style.setProperty('--button-glow-focus', `0 0 8px ${currentTheme['--primary-glow']}`); root.style.setProperty('--perfect-rhyme-color', currentTheme['--perfect-rhyme-color'] || currentTheme['--primary-glow']); }
        function getCurrentThemeSettings() { /* ... (unchanged) */ const themeSettings = {}; for (const key in defaultTheme) { themeSettings[key] = currentTheme[key] || defaultTheme[key]; } return themeSettings; }

        // --- Import / Export ---
        function exportData() { /* ... (unchanged) */ const data = { title: trackTitleInput.value, lyrics: lyricsInput.value, ideas: ideasInput.value, theme: getCurrentThemeSettings() }; const jsonString = JSON.stringify(data, null, 2); const blob = new Blob([jsonString], { type: 'application/json' }); const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; const safeTitle = data.title.replace(/[^a-z0-9]/gi, '_').toLowerCase() || 'untitled_track'; a.download = `${safeTitle}.json`; document.body.appendChild(a); a.click(); document.body.removeChild(a); URL.revokeObjectURL(url); }
        function importData(event) { /* ... (Calls combined update function) */ const file = event.target.files[0]; if (!file) return; const reader = new FileReader(); reader.onload = function(e) { try { const data = JSON.parse(e.target.result); if (data.title !== undefined) trackTitleInput.value = data.title; if (data.lyrics !== undefined) lyricsInput.value = data.lyrics; if (data.ideas !== undefined) ideasInput.value = data.ideas; applyTheme(data.theme || {}); updateCountersAndStructure(); /* USE COMBINED UPDATE */ clearRhymes(); } catch (error) { console.error("Error parsing JSON file:", error); alert("Error: Could not import file..."); } finally { importFile.value = null; } }; reader.readAsText(file); }


        // --- Event Listeners ---
        // Use combined update function for lyrics input
        lyricsInput.addEventListener('input', updateCountersAndStructure);
        lyricsInput.addEventListener('scroll', syncScroll); // Keep separate scroll sync
        lyricsInput.addEventListener('keyup', debouncedCheckRhymes);
        lyricsInput.addEventListener('click', debouncedCheckRhymes);
        exportBtn.addEventListener('click', exportData);
        importFile.addEventListener('change', importData);
        settingsToggle.addEventListener('click', () => settingsPanel.classList.remove('hidden', 'translate-x-full'));
        closeSettings.addEventListener('click', () => settingsPanel.classList.add('hidden', 'translate-x-full'));

        // Theme Color Pickers & Update currentTheme object
        settingsPanel.addEventListener('input', (e) => { /* ... (unchanged) */ if (e.target.type === 'color') { const variableName = '--' + e.target.id.replace(/([A-Z])/g, '-$1').toLowerCase().replace('-color',''); const newValue = e.target.value; root.style.setProperty(variableName, newValue); if (currentTheme.hasOwnProperty(variableName)) { currentTheme[variableName] = newValue; } if (variableName === '--primary-glow') { root.style.setProperty('--button-glow-focus', `0 0 8px ${newValue}`); currentTheme['--perfect-rhyme-color'] = newValue; root.style.setProperty('--perfect-rhyme-color', newValue); } if (variableName === '--textarea-bg') { lineCounterColumn.style.backgroundColor = newValue; } } });
        // Theme Presets
        presetButtons.forEach(button => { button.addEventListener('click', () => { try { const preset = JSON.parse(button.dataset.preset); applyTheme(preset); } catch (e) { console.error("Invalid preset data:", button.dataset.preset); } }); });
        // Reset Colors
        resetColorsBtn.addEventListener('click', () => { applyTheme(defaultTheme); });
        // Rhyme Show More Button
        rhymeShowMore.addEventListener('click', () => { displayRhymes(currentRhymeResults, false); });


        // --- Initial Setup ---
        generateStars(100, '--stars-small');
        generateStars(50, '--stars-medium');
        applyTheme(currentTheme);
        updateCountersAndStructure(); // Initial call for counters and structure

    </script>
</body>
</html>
